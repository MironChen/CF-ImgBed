---
import Layout from '~/layouts/BaseLayout.astro';
import { EscapeHtml } from '~/lib/utils';

const user = Astro.locals.user; // Get user from middleware
---

<Layout title="上传图片 - ImgBed">
  <header class="container mx-auto px-4 md:px-8 py-4 flex justify-between items-center gap-4">
    <a href="/" class="text-2xl font-bold">ImgBed</a>
    <div class="settings-section mt-8 text-center hidden md:block">
      {user ? (
        <a href="/admin" class="px-4 py-2 border text-text bg-background hover:text-background hover:bg-text">前往后台</a>
      ) : (
        <a href="/login" class="px-4 py-2 border text-text bg-background hover:text-background hover:bg-text">
          登录后台
        </a>
      )}
    </div>
  </header>
  <main class="container mx-auto p-4 md:p-8">
    <h1 class="text-3xl font-bold mb-8 text-center">图片上传</h1>

    <div class="upload-section border p-8 md:p-12 lg:p-14 mb-8">
      <div id="drop-zone" class="border-2 border-dashed border-border p-10 text-center cursor-pointer hover:border-text transition-colors">
        <p class="text-lg mb-2">拖拽文件到此处，点击选择，或直接粘贴图片</p>
        <p class="text-sm text-gray-500 mb-2">(支持批量上传)</p>
        <input type="file" id="file-input" multiple class="hidden" />
        <div id="selected-files-list" class="mt-2 text-sm text-gray-600"></div>
        <div id="pasted-image-previews" class="mt-4 flex flex-wrap gap-2 justify-center"></div> {/* New div for previews */}
      </div>

      <div class="mt-8">
        <label for="upload-directory" class="block font-medium mb-1">指定上传目录 (可选)</label>
        <input type="text" id="upload-directory" name="upload-directory" placeholder="例如：wallpapers/nature" class="w-full p-2 border ring-0 focus:rounded-none border-border focus:ring-text focus:border-text" />
      </div>

      <button id="upload-button" class="mt-6 w-full bg-background text-text py-2 px-4 border hover:opacity-90 hover:text-background hover:bg-text transition-opacity">
        上传
      </button>
    </div>

    <div class="links-section border border-border p-6 md:p-8 hidden">
      <h2 class="text-2xl font-semibold mb-4">上传成功！</h2>
      <div id="uploaded-links" class="space-y-4">
        <!-- 上传后的链接将显示在这里 -->
      </div>
    </div>

    <div class="settings-section mt-8 text-center md:hidden">
      {user ? (
        <a href="/admin" class="px-4 py-2 border text-text bg-background hover:text-background hover:bg-text">前往后台</a>
      ) : (
        <a href="/login" class="px-4 py-2 border text-text bg-background hover:text-background hover:bg-text">
          登录后台
        </a>
      )}
    </div>
  </main>
</Layout>

<script>
import { EscapeHtml } from "~/lib/utils";

  const dropZone = document.getElementById('drop-zone') as HTMLElement | null;
  const fileInput = document.getElementById('file-input') as HTMLInputElement | null;
  const uploadButton = document.getElementById('upload-button') as HTMLButtonElement | null;
  const uploadDirectoryInput = document.getElementById('upload-directory') as HTMLInputElement | null;
  const linksSection = document.querySelector('.links-section') as HTMLElement | null;
  const uploadedLinksContainer = document.getElementById('uploaded-links') as HTMLElement | null;
  const linksSectionTitle = linksSection?.querySelector('h2') as HTMLHeadingElement | null;
  const selectedFilesList = document.getElementById('selected-files-list') as HTMLElement | null;
  const pastedImagePreviews = document.getElementById('pasted-image-previews') as HTMLElement | null;
  
  let currentFiles: File[] = [];

  /**
   * Updates the hidden file input with the current selection of files
   * and refreshes the displayed file names and image previews.
   */
  function updateFileInputAndPreviews() {
    if (!fileInput) return;
    const dataTransfer = new DataTransfer();
    currentFiles.forEach(file => dataTransfer.items.add(file));
    fileInput.files = dataTransfer.files;
    
    displaySelectedFileNames();
    renderPastedImagePreviews();
  }

  /**
   * Displays the names of the currently selected files.
   */
  function displaySelectedFileNames() {
    if (!selectedFilesList) return;
    if (currentFiles.length > 0) {
      let fileNames = currentFiles.map(file => EscapeHtml(file.name)).join(', ');
      if (fileNames.length > 100) fileNames = fileNames.substring(0, 97) + '...'; // Truncate if too long
      selectedFilesList.innerHTML = `<strong>已选择 (${currentFiles.length}):</strong> ${fileNames}`;
    } else {
      selectedFilesList.innerHTML = '';
    }
  }

  /**
   * Renders previews for selected image files, including a remove button for each.
   */
  function renderPastedImagePreviews() {
    if (!pastedImagePreviews) return;
    pastedImagePreviews.innerHTML = ''; // Clear previous previews
    
    currentFiles.forEach((file, index) => {
      if (file.type.startsWith('image/')) { // Only preview image files
        const previewContainer = document.createElement('div');
        previewContainer.className = 'relative w-24 h-24 border border-border overflow-hidden';
        
        const img = document.createElement('img');
        img.src = URL.createObjectURL(file);
        img.alt = `预览 ${EscapeHtml(file.name)}`;
        img.className = 'w-full h-full object-cover';
        img.onload = () => URL.revokeObjectURL(img.src); 
        
        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'absolute top-0.5 right-0.5 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs leading-none hover:bg-red-700 focus:outline-none';
        removeBtn.innerHTML = '&times;';
        removeBtn.title = `移除 ${EscapeHtml(file.name)}`;
        removeBtn.onclick = (e) => {
          e.stopPropagation(); // Prevent dropZone click event if preview is inside dropZone
          currentFiles.splice(index, 1);
          updateFileInputAndPreviews();
        };

        previewContainer.appendChild(img);
        previewContainer.appendChild(removeBtn);
        pastedImagePreviews.appendChild(previewContainer);
      }
    });
  }

  dropZone?.addEventListener('paste', (event: ClipboardEvent) => {
    if (!event.clipboardData || !event.clipboardData.items) return;
    event.preventDefault();
    
    const newPastedFiles: File[] = [];
    for (let i = 0; i < event.clipboardData.items.length; i++) {
      const item = event.clipboardData.items[i];
      if (item.kind === 'file' && item.type.startsWith('image/')) {
        const file = item.getAsFile();
        if (file) newPastedFiles.push(file);
      }
    }

    if (newPastedFiles.length > 0) {
      newPastedFiles.forEach(pastedFile => {
        if (!currentFiles.some(f => f.name === pastedFile.name && f.size === pastedFile.size && f.lastModified === pastedFile.lastModified)) {
          currentFiles.push(pastedFile);
        }
      });
      updateFileInputAndPreviews();
    }
  });

  dropZone?.addEventListener('click', () => {
    fileInput?.click();
  });

  dropZone?.addEventListener('dragover', (event) => {
    event.preventDefault();
    if (dropZone) dropZone.classList.add('border-text');
  });

  dropZone?.addEventListener('dragleave', () => {
    if (dropZone) dropZone.classList.remove('border-text');
  });

  dropZone?.addEventListener('drop', (event: DragEvent) => {
    event.preventDefault();
    if (dropZone) dropZone.classList.remove('border-text');
    if (event.dataTransfer?.files) {
      currentFiles = Array.from(event.dataTransfer.files);
      updateFileInputAndPreviews();
    }
  });

  fileInput?.addEventListener('change', () => {
    if (fileInput.files) {
      currentFiles = Array.from(fileInput.files);
      updateFileInputAndPreviews();
    }
  });

  /**
   * Handles the file upload process when the upload button is clicked.
   */
  async function handleUpload() {
    if (!uploadButton || currentFiles.length === 0) {
      showUploadMessage('请选择要上传的文件。', true);
      return;
    }

    const formData = new FormData();
    currentFiles.forEach((file, index) => {
      formData.append('files', file); // Server expects 'files'
    });

    const uploadDir = uploadDirectoryInput ? uploadDirectoryInput.value.trim() : '';
    if (uploadDir) {
      formData.append('uploadDirectory', uploadDir);
    }

    uploadButton.disabled = true;
    uploadButton.textContent = `正在上传 ${currentFiles.length} 个文件...`;
    clearUploadMessage(); // Clear previous messages

    try {
      const response = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
        // 'Content-Type': 'multipart/form-data' is set automatically by browser for FormData
      });

      if (!response.ok) {
        let errorJson: { error?: string } = {};
        try {
          // Try to parse as JSON, server might return { "error": "message" }
          errorJson = await response.json();
        } catch (e) {
          // If JSON parsing fails, use the status text or a generic error
          console.warn('Failed to parse error response as JSON:', e);
        }
        const errorMessage = errorJson?.error || response.statusText || `HTTP error ${response.status}`;
        throw new Error(errorMessage);
      }
      
      // If response.ok, then we can safely parse the JSON
      const result = await response.json() as { message: string; files: UploadedFileResponse[] };
      showUploadMessage(result.message || `${result.files.length} 个文件上传成功！`);
      
      if (uploadedLinksContainer) {
        uploadedLinksContainer.innerHTML = ''; // Clear previous links
        result.files.forEach((uploadedFile) => {
          const linkGroup = document.createElement('div');
          linkGroup.className = 'link-group p-4 border border-border';
          
          const nameElement = document.createElement('p');
          nameElement.className = 'font-medium mb-2 break-all'; // Added break-all for long names
          nameElement.textContent = uploadedFile.fileName;
          linkGroup.appendChild(nameElement);

          const linksDiv = document.createElement('div');
          linksDiv.className = 'space-y-2';
          
          // Attempt to retrieve default copy format from localStorage or settings API
          const defaultCopyFormat = localStorage.getItem('defaultCopyFormat') || 'url'; 
          let autoCopiedThisUpload = false; // Ensure auto-copy happens once per upload batch

          const createLinkInput = (label: string, value: string, formatKey: string) => {
            const div = document.createElement('div');
            const labelSpan = document.createElement('span');
            labelSpan.className = 'font-semibold text-sm';
            labelSpan.textContent = `${label}: `;
            div.appendChild(labelSpan);
            
            const input = document.createElement('input');
            input.type = 'text';
            input.readOnly = true;
            input.value = value;
            input.className = 'w-full p-1.5 border border-border bg-background focus:outline-none focus:ring-1 focus:ring-text focus:border-text text-sm';
            input.addEventListener('focus', () => input.select());
            
            const feedbackSpan = document.createElement('span');
            feedbackSpan.className = 'text-xs text-green-500 ml-2 hidden';
            feedbackSpan.textContent = '已复制!';
            
            input.addEventListener('click', () => { 
                navigator.clipboard.writeText(value).then(() => {
                    feedbackSpan.classList.remove('hidden');
                    setTimeout(() => feedbackSpan.classList.add('hidden'), 1500);
                    console.log(`${label} copied to clipboard!`);
                }).catch(err => {
                    console.error(`Could not copy ${label}: `, err);
                    feedbackSpan.textContent = '复制失败';
                    feedbackSpan.className = 'text-xs text-red-500 ml-2';
                    feedbackSpan.classList.remove('hidden');
                    setTimeout(() => {
                        feedbackSpan.classList.add('hidden');
                        feedbackSpan.textContent = '已复制!'; // Reset for next time
                        feedbackSpan.className = 'text-xs text-green-500 ml-2 hidden';
                    }, 2000);
                });
            });
            div.appendChild(input);
            div.appendChild(feedbackSpan); // Add feedback span next to input
            linksDiv.appendChild(div);

            // Auto-copy the default format for the first successfully uploaded file in a batch
            if (!autoCopiedThisUpload && formatKey.toLowerCase() === defaultCopyFormat.toLowerCase()) {
              navigator.clipboard.writeText(value).then(() => {
                autoCopiedThisUpload = true;
                // Show feedback for auto-copy as well
                feedbackSpan.classList.remove('hidden');
                setTimeout(() => feedbackSpan.classList.add('hidden'), 1500);
                console.log(`Default format (${label}) auto-copied for ${uploadedFile.fileName}`);
                // TODO: Consider a global "Default link copied!" message if preferred over per-input feedback
              }).catch(err => console.error(`Could not auto-copy ${label}: `, err));
            }
          };
          
          const url = uploadedFile.url;
          const md = `![${EscapeHtml(uploadedFile.fileName)}](${url})`;
          const html = `<img src="${url}" alt="${EscapeHtml(uploadedFile.fileName)}" />`;

          createLinkInput('URL', url, 'url');
          createLinkInput('Markdown', md, 'markdown');
          createLinkInput('HTML', html, 'html');

          linkGroup.appendChild(linksDiv);
          uploadedLinksContainer.appendChild(linkGroup);
        });
      }
      currentFiles = [];
      updateFileInputAndPreviews();

    } catch (error: any) {
      console.error('Upload error:', error.message);
      showUploadMessage(`上传失败: ${error.message}`, true);
    } finally {
      if (uploadButton) {
        uploadButton.disabled = false;
        uploadButton.textContent = '上传';
      }
    }
  }
  uploadButton?.addEventListener('click', handleUpload);

  /**
   * Displays a message in the links section, optionally styled as an error.
   * @param {string} message - The message to display.
   * @param {boolean} [isError=false] - True if the message is an error.
   */
  function showUploadMessage(message: string, isError: boolean = false) {
    if (!linksSection || !linksSectionTitle || !uploadedLinksContainer) return;
    
    linksSectionTitle.textContent = isError ? '上传出错' : '操作结果';
    uploadedLinksContainer.innerHTML = `<p class="${isError ? 'text-red-500' : 'text-green-600'}">${EscapeHtml(message)}</p>`;
    linksSection.classList.remove('hidden');
  }

  /**
   * Clears any messages from the links section and hides it.
   */
  function clearUploadMessage() {
    if (!linksSection || !linksSectionTitle || !uploadedLinksContainer) return;
    linksSectionTitle.textContent = '';
    uploadedLinksContainer.innerHTML = '';
    linksSection.classList.add('hidden');
  }

  // Define UploadedFileResponse interface globally for the script
  interface UploadedFileResponse {
    id: string;
    r2Key: string;
    fileName: string;
    contentType: string;
    size: number;
    uploadedAt: string;
    userId?: string;
    uploadPath?: string;
    url: string;
  }
</script>
