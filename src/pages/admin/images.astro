---
import AdminLayout from "~/layouts/AdminLayout.astro";
import { EscapeHtml } from "~/lib/utils";

// This page is client-side rendered to dynamically fetch and manage images and directories.
export const prerender = false;
---

<AdminLayout title="图片管理 - 后台管理">
  <header class="flex justify-between items-center mb-8">
    <h1 class="text-3xl font-bold">图片管理</h1>
    <a
      href="/"
      class="bg-text text-background hover:bg-background hover:text-text border py-2 px-4 hover:opacity-90 transition-opacity"
    >
      上传新图片
    </a>
  </header>

  <div id="images-content-area" class="bg-background border">
    <p class="p-6 text-center text-gray-500">正在加载图片...</p>
  </div>

  <div
    id="no-images-message"
    class="text-center py-12 border border-dashed border-border bg-background hidden mt-4"
  >
    <svg
      class="mx-auto h-12 w-12 text-gray-400"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      aria-hidden="true"
    >
      <path
        vector-effect="non-scaling-stroke"
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
      ></path>
    </svg>
    <h3 class="mt-2 text-xl font-semibold">暂无图片</h3>
    <p class="mt-1 text-sm text-gray-500">开始上传你的第一张图片吧！</p>
    <div class="mt-6">
      <a
        href="/"
        class="bg-text text-background py-2 px-4 hover:opacity-90 transition-opacity"
      >
        前往上传
      </a>
    </div>
  </div>
</AdminLayout>

<script>
  import { EscapeHtml } from "~/lib/utils";

  const imagesContentArea = document.getElementById(
    "images-content-area",
  ) as HTMLElement | null;
  const noImagesMessage = document.getElementById(
    "no-images-message",
  ) as HTMLElement | null;

  let imageAccessPrefix = "img";
  let currentDirectoryPath = "";

  interface ImageDisplayData {
    id: string;
    r2Key: string;
    fileName: string;
    contentType: string;
    size: number;
    uploadedAt: string;
    userId?: string;
    uploadPath?: string;
    previewUrl?: string;
  }

  interface DirectoryApiResponse {
    path: string;
    images: ImageDisplayData[];
    directories: string[];
    currentDirectoryTotalSize?: number;
  }

  function formatBytes(bytes: number, decimals = 2): string {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
  }

  async function fetchImageSettings() {
    try {
      const response = await fetch("/api/admin/settings");
      if (response.ok) {
        const settings: { customImagePrefix?: string } = await response.json();
        if (settings.customImagePrefix) {
          imageAccessPrefix = settings.customImagePrefix.replace(
            /^\/+|\/+$/g,
            "",
          );
        }
      } else {
        console.warn(
          'Could not fetch custom image prefix, using default "img".',
        );
      }
    } catch (e) {
      console.warn(
        'Error fetching custom image prefix, using default "img".',
        e,
      );
    }
  }

  async function fetchImages(path = "") {
    currentDirectoryPath = path;
    if (!imagesContentArea || !noImagesMessage) return;

    imagesContentArea.innerHTML = `<p class="p-6 text-center text-gray-500">正在加载 <strong>${EscapeHtml(path || "根目录")}</strong> 中的内容...</p>`;
    noImagesMessage.classList.add("hidden");
    imagesContentArea.classList.remove("hidden");

    await fetchImageSettings();

    try {
      const apiUrl = `/api/admin/images?path=${encodeURIComponent(path)}`;
      const response = await fetch(apiUrl);
      if (!response.ok) throw new Error(`HTTP error ${response.status}`);
      const data = (await response.json()) as DirectoryApiResponse;
      renderContent(
        data.path,
        data.images,
        data.directories,
        data.currentDirectoryTotalSize,
      );
    } catch (error: any) {
      console.error(`Failed to fetch content for path '${path}':`, error);
      if (imagesContentArea)
        imagesContentArea.innerHTML = `<p class="p-6 text-center text-red-500">无法加载内容。请稍后重试。</p>`;
    }
  }

  async function deleteImages(imageIds: string[]) {
    if (!imageIds || imageIds.length === 0) return;
    if (
      !confirm(`确定要删除选中的 ${imageIds.length} 张图片吗？此操作不可逆。`)
    )
      return;
    try {
      const response = await fetch("/api/admin/images", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ imageIds }),
      });
      const result: {
        message?: string;
        error?: string;
        details?: { failed?: { reason: string }[] };
      } = await response.json();
      if (!response.ok)
        throw new Error(
          result.error ||
            result.details?.failed?.[0]?.reason ||
            `HTTP error ${response.status}`,
        );
      alert(result.message || "图片删除操作已完成。");
      fetchImages(currentDirectoryPath);
    } catch (error: any) {
      console.error("Failed to delete images:", error);
      alert(`删除图片失败: ${error.message}`);
    }
  }

  async function moveImages(imageIds: string[], targetDirectory: string) {
    if (!imageIds || imageIds.length === 0) return;
    if (targetDirectory === null) return; // User cancelled prompt

    try {
      const response = await fetch("/api/admin/images", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ imageIds, targetDirectory }),
      });
      const result: {
        message?: string;
        error?: string;
        results?: { moved: any[]; failed: any[] };
      } = await response.json();
      if (!response.ok) {
        throw new Error(result.error || `HTTP error ${response.status}`);
      }
      alert(result.message || "图片移动操作已完成。");
      if (result.results?.failed?.length) {
        console.warn("部分图片移动失败:", result.results.failed);
        alert(`部分图片移动失败，详情请查看控制台。`);
      }
      fetchImages(currentDirectoryPath);
    } catch (error: any) {
      console.error("Failed to move images:", error);
      alert(`移动图片失败: ${error.message}`);
    }
  }

  function promptForDirectoryAndMove(imageIds: string[]) {
    if (!imageIds || imageIds.length === 0) {
      alert("请选择要移动的图片。");
      return;
    }
    const targetDirectory = prompt(
      `输入目标目录路径 (例如 'archive/summer' 或留空表示根目录):`,
      currentDirectoryPath,
    );
    if (targetDirectory !== null) {
      // Not cancelled
      moveImages(imageIds, targetDirectory);
    }
  }

  /**
   * Renders the content of a directory, including breadcrumbs, subdirectories, and images.
   * @param {string} path - The current directory path being rendered.
   * @param {ImageDisplayData[]} images - An array of image objects in the current directory.
   * @param {string[]} directories - An array of subdirectory names in the current directory.
   * @param {number} [currentDirectoryTotalSize] - Optional total size of images in the current directory.
   */
  function renderContent(
    path: string,
    images: ImageDisplayData[],
    directories: string[],
    currentDirectoryTotalSize?: number,
  ) {
    if (!imagesContentArea || !noImagesMessage) return;
    imagesContentArea.innerHTML = ""; // Clear previous content

    // --- 1. Render Breadcrumbs ---
    const breadcrumbsContainer = document.createElement("div");
    breadcrumbsContainer.className =
      "p-4 border-b border-border text-sm flex items-center space-x-1 flex-wrap";
    let accumulatedPath = "";
    const rootLink = document.createElement("a");
    rootLink.href = "#";
    rootLink.textContent = "根目录";
    rootLink.className = "hover:underline text-indigo-600";
    rootLink.addEventListener("click", (e) => {
      e.preventDefault();
      fetchImages("");
    });
    breadcrumbsContainer.appendChild(rootLink);
    const pathSegments = path.split("/").filter((p) => p);
    pathSegments.forEach((segment, index) => {
      const separator = document.createElement("span");
      separator.className = "text-gray-500 mx-1";
      separator.textContent = "/";
      breadcrumbsContainer.appendChild(separator);
      accumulatedPath += (accumulatedPath ? "/" : "") + segment;
      if (index === pathSegments.length - 1) {
        const span = document.createElement("span");
        span.className = "text-gray-700 font-medium";
        span.textContent = EscapeHtml(segment);
        breadcrumbsContainer.appendChild(span);
      } else {
        const segmentLink = document.createElement("a");
        segmentLink.href = "#";
        segmentLink.textContent = EscapeHtml(segment);
        segmentLink.className = "hover:underline text-indigo-600";
        segmentLink.dataset.path = accumulatedPath;
        segmentLink.addEventListener("click", (e) => {
          e.preventDefault();
          fetchImages((e.target as HTMLAnchorElement).dataset.path || "");
        });
        breadcrumbsContainer.appendChild(segmentLink);
      }
    });
    imagesContentArea.appendChild(breadcrumbsContainer);

    // --- 2. Render Current Directory Info (e.g., total size) ---
    if (typeof currentDirectoryTotalSize === "number") {
      const dirInfo = document.createElement("div");
      dirInfo.className = "p-4 text-sm text-gray-600 border-b border-border";
      dirInfo.textContent = `图片总大小: ${formatBytes(currentDirectoryTotalSize)}`;
      imagesContentArea.appendChild(dirInfo);
    }

    // Create a container for the table that allows horizontal scrolling on small screens
    const tableContainer = document.createElement("div");
    tableContainer.className = "overflow-x-auto"; 
    imagesContentArea.appendChild(tableContainer);

    // --- 3. Handle Empty Directory or Root ---
    if (images.length === 0 && directories.length === 0) {
      if (path !== "") { // If it's a non-root empty directory
        const emptyMsg = document.createElement("p");
        emptyMsg.className = "p-6 text-center text-gray-500";
        emptyMsg.textContent = "此目录为空。";
        tableContainer.appendChild(emptyMsg); // Add to tableContainer instead of tableArea
      } else { // If it's the root directory and it's empty
        imagesContentArea.classList.add("hidden");
        noImagesMessage.classList.remove("hidden");
      }
      return; // Stop rendering if directory is empty
    }

    imagesContentArea.classList.remove("hidden"); // Ensure content area is visible
    noImagesMessage.classList.add("hidden");    // Hide "no images" message

    // --- 4. Create and Populate Table ---
    const table = document.createElement("table");
    // Ensure table takes at least full width, but can expand further if content requires (for scrolling)
    table.className = "min-w-full w-full divide-y divide-border"; 
    table.innerHTML = `
      <thead class="bg-gray-50">
        <tr>
          <th class="w-12 px-4 py-3 text-left text-xs font-medium uppercase tracking-wider whitespace-nowrap"><input type="checkbox" id="select-all-items" class="rounded border-border focus:ring-text" /></th>
          <th class="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider whitespace-nowrap">预览</th>
          <th class="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider whitespace-nowrap">名称</th>
          <th class="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider whitespace-nowrap hidden sm:table-cell">ID / 类型</th>
          <th class="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider whitespace-nowrap">大小</th>
          <th class="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider whitespace-nowrap hidden md:table-cell">上传日期</th>
          <th class="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider whitespace-nowrap">操作</th>
        </tr>
      </thead>
      <tbody class="bg-background divide-y divide-border"></tbody>`;
    const tbody = table.querySelector("tbody");
    if (!tbody) return;

    // Render directory rows
    directories.forEach((dirName) => {
      const tr = document.createElement("tr");
      tr.className = "hover:bg-gray-50 cursor-pointer directory-row";
      const fullDirPath = path ? `${path}/${dirName}` : dirName;
      tr.dataset.path = fullDirPath; // Store full path for navigation
      tr.innerHTML = `
        <td class="px-4 py-3 whitespace-nowrap"><input type="checkbox" class="item-checkbox directory-checkbox rounded border-border focus:ring-text" data-name="${EscapeHtml(dirName)}" data-type="directory" /></td>
        <td class="px-4 py-3 whitespace-nowrap"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-8 h-8 text-yellow-500"><path d="M19.5 21a3 3 0 003-3v-4.5a3 3 0 00-3-3h-15a3 3 0 00-3 3V18a3 3 0 003 3h15zM1.5 10.5a3 3 0 013-3h15a3 3 0 013 3V12a.75.75 0 01-1.5 0v-1.5a1.5 1.5 0 00-1.5-1.5h-15a1.5 1.5 0 00-1.5 1.5v6.75a1.5 1.5 0 001.5 1.5h15a1.5 1.5 0 001.5-1.5V18a.75.75 0 011.5 0v.75a3 3 0 01-3 3h-15a3 3 0 01-3-3v-4.5z" /></svg></td>
        <td class="px-4 py-3 text-sm font-medium text-indigo-600 whitespace-nowrap" colspan="3">${EscapeHtml(dirName)}</td>
        <td class="px-4 py-3 text-sm text-gray-500 whitespace-nowrap hidden md:table-cell">目录</td>
        <td class="px-4 py-3 text-sm font-medium whitespace-nowrap">
        </td>`;
      tbody.appendChild(tr);
      // Navigate to directory on row click (but not on checkbox click or other interactive elements within the row)
      tr.addEventListener("click", (e) => {
        // Check if the click target or its parent is a button or checkbox
        let targetElement = e.target as HTMLElement;
        let isInteractiveElementClick = false;
        while(targetElement && targetElement !== tr) {
            if (targetElement.tagName === 'BUTTON' || (targetElement.tagName === 'INPUT' && (targetElement as HTMLInputElement).type === 'checkbox')) {
                isInteractiveElementClick = true;
                break;
            }
            targetElement = targetElement.parentElement as HTMLElement;
        }
        if (!isInteractiveElementClick) {
          fetchImages(fullDirPath);
        }
      });
    });

    // Render image rows
    images.forEach((image) => {
      const fileExtension = image.fileName.includes(".")
        ? `.${image.fileName.split(".").pop()}` // Basic extension extraction
        : "";
      const previewUrl = `/${imageAccessPrefix}/${image.id}${fileExtension}`;
      const tr = document.createElement("tr");
      tr.className = "image-row";
      tr.innerHTML = `
        <td class="px-4 py-3 whitespace-nowrap"><input type="checkbox" class="item-checkbox image-checkbox rounded border-border focus:ring-text" data-id="${EscapeHtml(image.id)}" data-type="image" /></td>
        <td class="px-4 py-3 whitespace-nowrap"><img src="${EscapeHtml(previewUrl)}" alt="${EscapeHtml(image.fileName)}" class="h-10 w-10 object-cover rounded border border-border" loading="lazy" /></td>
        <td class="px-4 py-3 text-sm font-medium whitespace-nowrap" title="${EscapeHtml(image.fileName)}"><span class="block max-w-[120px] sm:max-w-[150px] truncate">${EscapeHtml(image.fileName)}</span></td>
        <td class="px-4 py-3 text-sm text-gray-500 whitespace-nowrap hidden sm:table-cell" title="${EscapeHtml(image.r2Key)}"><span class="block max-w-[100px] truncate">${EscapeHtml(image.id)}</span></td>
        <td class="px-4 py-3 text-sm text-gray-500 whitespace-nowrap">${formatBytes(image.size)}</td>
        <td class="px-4 py-3 text-sm text-gray-500 whitespace-nowrap hidden md:table-cell">${new Date(image.uploadedAt).toLocaleDateString()}</td>
        <td class="px-4 py-3 text-sm font-medium whitespace-nowrap">
          <div class="flex space-x-1 sm:space-x-2">
            <button class="text-indigo-600 hover:text-indigo-900 view-link-button p-1" data-url="${EscapeHtml(previewUrl)}">查看</button>
            <button class="text-blue-600 hover:text-blue-900 move-image-button p-1" data-id="${EscapeHtml(image.id)}">移动</button>
            <button class="text-red-600 hover:text-red-900 delete-image-button p-1" data-id="${EscapeHtml(image.id)}">删除</button>
          </div>
        </td>`;
      tbody.appendChild(tr);
    });

    tableContainer.appendChild(table); // Add table to the scrollable container

    // --- 5. Render Batch Action Bar (if items exist) ---
    if (images.length > 0 || directories.length > 0) {
      const actionBar = document.createElement("div");
      // Place action bar outside the scrollable container for better UX
      actionBar.className = "p-4 flex flex-col sm:flex-row justify-between items-center border-t border-border mt-0"; 
      actionBar.innerHTML = `
        <div class="text-sm text-gray-600 mb-2 sm:mb-0">选中 <span id="selected-count">0</span> 项</div>
        <div class="space-x-2">
          <button id="batch-move-selected" class="text-sm text-blue-600 hover:text-blue-800 disabled:opacity-50 py-1 px-2 border border-transparent hover:border-blue-300 rounded" disabled title="批量移动选中的图片">批量移动</button>
          <button id="batch-delete-selected" class="text-sm text-red-600 hover:text-red-800 disabled:opacity-50 py-1 px-2 border border-transparent hover:border-red-300 rounded" disabled title="批量删除选中的图片">批量删除</button>
        </div>`;
      imagesContentArea.appendChild(actionBar); // Add action bar directly to imagesContentArea

      const selectAllCheckbox = tableContainer.querySelector("#select-all-items") as HTMLInputElement | null;
      const itemCheckboxes = tableContainer.querySelectorAll(".item-checkbox") as NodeListOf<HTMLInputElement>;
      const batchDeleteBtn = actionBar.querySelector("#batch-delete-selected") as HTMLButtonElement | null;
      const batchMoveBtn = actionBar.querySelector("#batch-move-selected") as HTMLButtonElement | null;
      const selectedCountSpan = actionBar.querySelector("#selected-count") as HTMLSpanElement | null;

      // Function to update the enabled/disabled state of batch action buttons
      function updateBatchActionsState() {
        const selectedImages = Array.from(itemCheckboxes).filter(
          (cb) => cb.checked && cb.dataset.type === "image"
        );
        const selectedDirectories = Array.from(itemCheckboxes).filter(
          (cb) => cb.checked && cb.dataset.type === "directory"
        );
        const totalSelected = selectedImages.length + selectedDirectories.length;

        if (selectedCountSpan) {
            selectedCountSpan.textContent = totalSelected.toString();
        }

        // Enable batch buttons only if at least one IMAGE is selected.
        // Batch actions for directories are not currently supported by the backend logic shown.
        const anyImageSelected = selectedImages.length > 0;
        if (batchDeleteBtn) batchDeleteBtn.disabled = !anyImageSelected;
        if (batchMoveBtn) batchMoveBtn.disabled = !anyImageSelected;
      }

      // Event listener for "select all" checkbox
      selectAllCheckbox?.addEventListener("change", () => {
        itemCheckboxes.forEach(cb => (cb.checked = selectAllCheckbox.checked));
        updateBatchActionsState();
      });

      // Event listeners for individual item checkboxes
      itemCheckboxes.forEach((cb) => {
        cb.addEventListener("change", () => {
          if (!cb.checked && selectAllCheckbox) {
            selectAllCheckbox.checked = false;
          } else {
            // Check if all items are selected to update the "select all" checkbox state
            const allSelected = Array.from(itemCheckboxes).every(iCb => iCb.checked);
            if (allSelected && itemCheckboxes.length > 0 && selectAllCheckbox) {
              selectAllCheckbox.checked = true;
            }
          }
          updateBatchActionsState();
        });
      });
      updateBatchActionsState(); // Initial state check

      // Event listener for batch delete button
      batchDeleteBtn?.addEventListener("click", () => {
        const selectedImageIds = Array.from(itemCheckboxes)
          .filter(cb => cb.checked && cb.dataset.type === "image" && cb.dataset.id)
          .map(cb => cb.dataset.id as string);
        if (selectedImageIds.length > 0) {
          deleteImages(selectedImageIds);
        } else {
          alert("请至少选择一张图片进行批量删除。");
        }
      });

      // Event listener for batch move button
      batchMoveBtn?.addEventListener("click", () => {
        const selectedImageIds = Array.from(itemCheckboxes)
          .filter(cb => cb.checked && cb.dataset.type === "image" && cb.dataset.id)
          .map(cb => cb.dataset.id as string);
        if (selectedImageIds.length > 0) {
          promptForDirectoryAndMove(selectedImageIds);
        } else {
          alert("请至少选择一张图片进行批量移动。");
        }
      });
    }

    // --- 6. Add Event Listeners for Individual Item Actions ---
    tbody.querySelectorAll(".delete-image-button").forEach((button) => {
      button.addEventListener("click", (event) => {
        const id = (event.currentTarget as HTMLButtonElement).dataset.id;
        if (id) deleteImages([id]);
      });
    });
    tbody.querySelectorAll(".move-image-button").forEach((button) => {
      button.addEventListener("click", (event) => {
        const id = (event.currentTarget as HTMLButtonElement).dataset.id;
        if (id) promptForDirectoryAndMove([id]);
      });
    });
    tbody.querySelectorAll(".view-link-button").forEach((button) => {
      button.addEventListener("click", (event) => {
        const url = (event.currentTarget as HTMLButtonElement).dataset.url;
        if (url) window.open(url, "_blank");
      });
    });
    // Directory-specific actions (move, delete) are not implemented based on user feedback.
  }

  /**
   * Initializes the page by fetching and rendering the content of the root directory.
   */
  document.addEventListener("DOMContentLoaded", () => {
    fetchImages(); // Load content for the root path by default
  });
</script>
