---
import AdminLayout from '~/layouts/AdminLayout.astro';

// Define AppSettings interface locally if not imported, matching the backend
interface AppSettingsInternal {
  defaultCopyFormat?: string;
  customImagePrefix?: string;
  enableHotlinkProtection?: boolean;
  allowedDomains?: string[];
  siteDomain?: string;
}

const CONFIG_KEYS = { // Mirroring CONFIG_KEYS from settings.ts
  defaultCopyFormat: 'config:defaultCopyFormat',
  customImagePrefix: 'config:customImagePrefix',
  enableHotlinkProtection: 'config:enableHotlinkProtection',
  allowedDomains: 'config:allowedDomains',
  siteDomain: 'config:siteDomain',
};

async function getSettingsFromBackend(locals: App.Locals): Promise<AppSettingsInternal> { // Changed Astro.Locals to App.Locals
  const user = locals.user;
  if (!user) {
    // In a real page, you might redirect or show an error message
    // For now, return empty settings or throw an error that Astro can catch
    console.warn('Settings page: User not authenticated. Cannot load settings server-side.');
    return {}; 
  }

  const { IMGBED_KV } = locals.runtime.env;
  if (!IMGBED_KV) {
    console.error('Settings page: IMGBED_KV not available for server-side rendering.');
    return {}; // Return empty or default settings
  }

  try {
    const settings: AppSettingsInternal = {};
    
    const defaultCopyFormat = await IMGBED_KV.get(CONFIG_KEYS.defaultCopyFormat);
    if (defaultCopyFormat) settings.defaultCopyFormat = defaultCopyFormat;

    const customImagePrefix = await IMGBED_KV.get(CONFIG_KEYS.customImagePrefix);
    // Allow customImagePrefix to be an empty string (it's a valid value)
    if (customImagePrefix !== null && customImagePrefix !== undefined) settings.customImagePrefix = customImagePrefix;
    
    const enableHotlinkProtectionStr = await IMGBED_KV.get(CONFIG_KEYS.enableHotlinkProtection);
    if (enableHotlinkProtectionStr) settings.enableHotlinkProtection = enableHotlinkProtectionStr === 'true';

    const allowedDomainsStr = await IMGBED_KV.get(CONFIG_KEYS.allowedDomains);
    if (allowedDomainsStr) {
      try {
        settings.allowedDomains = JSON.parse(allowedDomainsStr) as string[];
      } catch (e) {
        console.error('Settings page (SSR): Failed to parse allowedDomains from KV:', e);
        settings.allowedDomains = [];
      }
    } else {
      settings.allowedDomains = [];
    }

    const siteDomain = await IMGBED_KV.get(CONFIG_KEYS.siteDomain);
    if (siteDomain !== null && siteDomain !== undefined) settings.siteDomain = siteDomain;

    return settings;
  } catch (e: any) {
    console.error('Settings page (SSR): Error fetching settings:', e.message);
    return {}; // Return empty or default settings on error
  }
}

const settings = await getSettingsFromBackend(Astro.locals);

const copyFormats = [
  { value: 'url', label: 'URL (直接链接)' },
  { value: 'markdown', label: 'Markdown' },
  { value: 'html', label: 'HTML (<img> 标签)' },
  { value: 'bbcode', label: 'BBCode ([img] 标签)' },
];
---

<AdminLayout title="设置 - 后台管理">
  <header class="mb-8">
    <h1 class="text-3xl font-bold">系统设置</h1>
  </header>

  <form id="settings-form" class="space-y-8">
    <section class="bg-background text-text border p-6">
      <h2 class="text-xl font-semibold mb-4">上传与链接设置</h2>
      
      <div>
        <label for="default-copy-format" class="block text-sm font-medium mb-1">默认复制格式</label>
        <select id="default-copy-format" name="defaultCopyFormat" class="w-full md:w-1/2 p-2 border border-border focus:ring-text focus:border-text">
          {copyFormats.map(format => (
            <option 
              class="border rounded-none" 
              value={format.value}
              selected={settings.defaultCopyFormat === format.value}
            >
              {format.label}
            </option>
          ))}
        </select>
        <p class="text-xs text-gray-500 mt-1">上传完成后，将自动复制此格式的链接。</p>
      </div>

      <div class="mt-6">
        <label for="custom-image-prefix" class="block text-sm font-medium mb-1">自定义图片访问前缀</label>
        <div class="flex items-center">
          <span class="text-sm text-gray-500 mr-1" id="domain-label">{settings.siteDomain || 'your-domain.com'}/</span>
          <input 
            type="text" 
            id="custom-image-prefix" 
            name="customImagePrefix" 
            value={settings.customImagePrefix ?? ""}
            placeholder="例如：img, files, assets" 
            class="w-full md:w-1/3 p-2 border border-border focus:ring-text focus:border-text" 
          />
          <span class="text-sm text-gray-500 ml-1">/your-image.jpg</span>
        </div>
        <p class="text-xs text-gray-500 mt-1">设置图片访问 URL 中的路径前缀。留空默认 img。</p>
      </div>

      <div class="mt-6">
        <label for="site-domain" class="block text-sm font-medium mb-1">自定义网站域名 (可选)</label>
        <input 
            type="text" 
            id="site-domain" 
            name="siteDomain" 
            value={settings.siteDomain ?? ""}
            placeholder="例如：img.example.com 或 https://img.example.com" 
            class="w-full md:w-1/2 p-2 border border-border focus:ring-text focus:border-text" 
          />
        <p class="text-xs text-gray-500 mt-1">用于生成图片的公开访问链接。如果留空，将尝试自动检测当前域名。推荐包含协议 (http/https)。</p>
      </div>
    </section>

    <section class="bg-background border p-6">
      <h2 class="text-xl font-semibold mb-4">安全设置</h2>
      
      <div class="flex items-start">
        <div class="flex items-center h-5">
          <input 
            id="enable-hotlink-protection" 
            name="enableHotlinkProtection" 
            type="checkbox" 
            class="focus:ring-text h-4 w-4 text-text border-border rounded"
            checked={settings.enableHotlinkProtection}
          />
        </div>
        <div class="ml-3 text-sm">
          <label for="enable-hotlink-protection" class="font-medium">启用防盗链</label>
          <p class="text-xs text-gray-500">防止其他网站直接嵌入您的图片。</p>
        </div>
      </div>

      <div id="allowed-domains-section" class:list={["mt-4", { "hidden": !settings.enableHotlinkProtection }]}>
        <label for="allowed-domains" class="block text-sm font-medium mb-1">允许的域名 (白名单)</label>
        <textarea 
          id="allowed-domains" 
          name="allowedDomains" 
          rows="3" 
          class="w-full md:w-1/2 p-2 border border-border focus:ring-text focus:border-text"
          placeholder="每行一个域名，例如：\nexample.com\nyour-blog.com"
        >{settings.allowedDomains?.join('\n') ?? ""}</textarea>
        <p class="text-xs text-gray-500 mt-1">允许这些域名下的网站引用图片。如果为空，则所有外部引用都会被阻止（如果启用了防盗链）。</p>
      </div>
    </section>
    
    <section class="bg-background border p-6">
      <h2 class="text-xl font-semibold mb-4">账户设置</h2>
      <div>
        <p class="text-sm mb-2">登录凭据通过环境变量配置。请参考文档设置 <code>AUTH_USERNAME</code> 和 <code>AUTH_PASSWORD</code>。</p>
        {/* Future: Change password option if not solely env-based */}
      </div>
    </section>

    <div class="mt-8 flex justify-end">
      <button type="submit" class="bg-text text-background hover:text-text hover:bg-background border py-2 px-6 cursor-pointer hover:opacity-90 transition-opacity">
        保存设置
      </button>
    </div>
  </form>
</AdminLayout>

<script>

  const form = document.getElementById('settings-form') as HTMLFormElement | null;
  // These selectors are still needed for the submit handler
  const defaultCopyFormatSelect = document.getElementById('default-copy-format') as HTMLSelectElement | null;
  const customImagePrefixInput = document.getElementById('custom-image-prefix') as HTMLInputElement | null;
  const siteDomainInput = document.getElementById('site-domain') as HTMLInputElement | null;
  const hotlinkCheckbox = document.getElementById('enable-hotlink-protection') as HTMLInputElement | null;
  const allowedDomainsTextarea = document.getElementById('allowed-domains') as HTMLTextAreaElement | null;
  const allowedDomainsSection = document.getElementById('allowed-domains-section') as HTMLElement | null;
  const domainLabel = document.getElementById('domain-label') as HTMLSpanElement | null; // Still needed if siteDomainInput changes

  // Function to toggle visibility of allowed domains section
  function toggleAllowedDomainsSection(show: boolean) {
    if (allowedDomainsSection) {
      allowedDomainsSection.classList.toggle('hidden', !show);
    }
  }

  // Event listener for hotlink checkbox
  hotlinkCheckbox?.addEventListener('change', () => {
    if (hotlinkCheckbox) { // Ensure not null
        toggleAllowedDomainsSection(hotlinkCheckbox.checked);
    }
  });
  
  // Update domain label when siteDomainInput changes
  siteDomainInput?.addEventListener('input', () => {
    if (domainLabel) {
      if (siteDomainInput.value.trim()) {
        domainLabel.innerText = siteDomainInput.value.trim() + '/';
      } else {
        // Fallback to a placeholder or auto-detected domain if you have that logic elsewhere
        // For now, using the same placeholder as in SSR
        domainLabel.innerText = 'your-domain.com/'; 
      }
    }
  });


  // --- Save settings (POST request logic remains largely the same) ---
  form?.addEventListener('submit', async (event) => {
    event.preventDefault();
    if (!defaultCopyFormatSelect || !customImagePrefixInput || !siteDomainInput || !hotlinkCheckbox || !allowedDomainsTextarea) {
        alert('表单元素未找到，无法保存。');
        return;
    }

    const settingsToSave = {
      defaultCopyFormat: defaultCopyFormatSelect.value,
      customImagePrefix: customImagePrefixInput.value.trim(),
      siteDomain: siteDomainInput.value.trim(),
      enableHotlinkProtection: hotlinkCheckbox.checked,
      allowedDomains: allowedDomainsTextarea.value.split('\n').map(d => d.trim()).filter(d => d),
    };

    try {
      const response = await fetch('/api/admin/settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settingsToSave),
      });

      if (!response.ok) {
        let errorPayload: { error?: string; details?: string } = { error: '保存失败' };
        try { 
            const parsedError: any = await response.json();
            if(parsedError && typeof parsedError.error === 'string') errorPayload.error = parsedError.error;
            if(parsedError && typeof parsedError.details === 'string') errorPayload.details = parsedError.details;
        } catch(e){}
        throw new Error(errorPayload.error || errorPayload.details || `HTTP error ${response.status}`);
      }
      
      if (settingsToSave.defaultCopyFormat) {
        localStorage.setItem('defaultCopyFormat', settingsToSave.defaultCopyFormat);
      } else {
        localStorage.removeItem('defaultCopyFormat');
      }

      alert('设置已成功保存！');
    } catch (error: any) {
      console.error('Error saving settings:', error);
      alert(`保存设置失败: ${error.message}`);
    }
  });

  // No need for document.addEventListener('DOMContentLoaded', loadSettings);
  // The initial state of toggleAllowedDomainsSection is handled by Astro's class:list directive
  // and the hotlinkCheckbox event listener will handle changes.
</script>
