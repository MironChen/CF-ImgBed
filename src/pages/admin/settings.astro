---
import AdminLayout from '~/layouts/AdminLayout.astro';

// Note: Initial form values are populated by client-side JavaScript (`loadSettings` function)
// after fetching current settings from the API. The `value` attributes in HTML are placeholders
// or will be overridden.

const copyFormats = [
  { value: 'url', label: 'URL (直接链接)' },
  { value: 'markdown', label: 'Markdown' },
  { value: 'html', label: 'HTML (<img> 标签)' },
  { value: 'bbcode', label: 'BBCode ([img] 标签)' },
];
---

<AdminLayout title="设置 - 后台管理">
  <header class="mb-8">
    <h1 class="text-3xl font-bold">系统设置</h1>
  </header>

  <form id="settings-form" class="space-y-8">
    <section class="bg-background text-text border p-6">
      <h2 class="text-xl font-semibold mb-4">上传与链接设置</h2>
      
      <div>
        <label for="default-copy-format" class="block text-sm font-medium mb-1">默认复制格式</label>
        <select id="default-copy-format" name="defaultCopyFormat" class="w-full md:w-1/2 p-2 border border-border focus:ring-text focus:border-text">
          {copyFormats.map(format => (
            // `selected` attribute will be dynamically set by client-side script after loading settings
            <option class="border rounded-none" value={format.value}>
              {format.label}
            </option>
          ))}
        </select>
        <p class="text-xs text-gray-500 mt-1">上传完成后，将自动复制此格式的链接。</p>
      </div>

      <div class="mt-6">
        <label for="custom-image-prefix" class="block text-sm font-medium mb-1">自定义图片访问前缀</label>
        <div class="flex items-center">
          <span class="text-sm text-gray-500 mr-1" id="domain-label">your-domain.com/</span>
          <input 
            type="text" 
            id="custom-image-prefix" 
            name="customImagePrefix" 
            value=""
            placeholder="例如：img, files, assets" 
            class="w-full md:w-1/3 p-2 border border-border focus:ring-text focus:border-text" 
          />
          <span class="text-sm text-gray-500 ml-1">/your-image.jpg</span>
        </div>
        <p class="text-xs text-gray-500 mt-1">设置图片访问 URL 中的路径前缀。留空默认 img。</p>
      </div>

      <div class="mt-6">
        <label for="site-domain" class="block text-sm font-medium mb-1">自定义网站域名 (可选)</label>
        <input 
            type="text" 
            id="site-domain" 
            name="siteDomain" 
            value=""
            placeholder="例如：img.example.com 或 https://img.example.com" 
            class="w-full md:w-1/2 p-2 border border-border focus:ring-text focus:border-text" 
          />
        <p class="text-xs text-gray-500 mt-1">用于生成图片的公开访问链接。如果留空，将尝试自动检测当前域名。推荐包含协议 (http/https)。</p>
      </div>
    </section>

    <section class="bg-background border p-6">
      <h2 class="text-xl font-semibold mb-4">安全设置</h2>
      
      <div class="flex items-start">
        <div class="flex items-center h-5">
          <input 
            id="enable-hotlink-protection" 
            name="enableHotlinkProtection" 
            type="checkbox" 
            class="focus:ring-text h-4 w-4 text-text border-border rounded"
          />
        </div>
        <div class="ml-3 text-sm">
          <label for="enable-hotlink-protection" class="font-medium">启用防盗链</label>
          <p class="text-xs text-gray-500">防止其他网站直接嵌入您的图片。</p>
        </div>
      </div>

      <div id="allowed-domains-section" class="mt-4 hidden"> {/* Initially hidden, controlled by script */}
        <label for="allowed-domains" class="block text-sm font-medium mb-1">允许的域名 (白名单)</label>
        <textarea 
          id="allowed-domains" 
          name="allowedDomains" 
          rows="3" 
          class="w-full md:w-1/2 p-2 border border-border focus:ring-text focus:border-text"
          placeholder="每行一个域名，例如：\nexample.com\nyour-blog.com"
        ></textarea>
        <p class="text-xs text-gray-500 mt-1">允许这些域名下的网站引用图片。如果为空，则所有外部引用都会被阻止（如果启用了防盗链）。</p>
      </div>
    </section>
    
    <section class="bg-background border p-6">
      <h2 class="text-xl font-semibold mb-4">账户设置</h2>
      <div>
        <p class="text-sm mb-2">登录凭据通过环境变量配置。请参考文档设置 <code>AUTH_USERNAME</code> 和 <code>AUTH_PASSWORD</code>。</p>
        {/* Future: Change password option if not solely env-based */}
      </div>
    </section>

    <div class="mt-8 flex justify-end">
      <button type="submit" class="bg-text text-background hover:text-text hover:bg-background border py-2 px-6 cursor-pointer hover:opacity-90 transition-opacity">
        保存设置
      </button>
    </div>
  </form>
</AdminLayout>

<script>

  const form = document.getElementById('settings-form') as HTMLFormElement | null;
  const defaultCopyFormatSelect = document.getElementById('default-copy-format') as HTMLSelectElement | null;
  const domainLabel = document.getElementById('domain-label') as HTMLSpanElement | null;
  const customImagePrefixInput = document.getElementById('custom-image-prefix') as HTMLInputElement | null;
  const siteDomainInput = document.getElementById('site-domain') as HTMLInputElement | null; // New input
  const hotlinkCheckbox = document.getElementById('enable-hotlink-protection') as HTMLInputElement | null;
  const allowedDomainsTextarea = document.getElementById('allowed-domains') as HTMLTextAreaElement | null;
  const allowedDomainsSection = document.getElementById('allowed-domains-section') as HTMLElement | null

  // --- Load initial settings ---
  async function loadSettings() {
    try {
      const response = await fetch('/api/admin/settings');
      if (!response.ok) {
        console.error('Failed to load settings:', response.status, await response.text());
        alert('无法加载设置，请稍后重试。');
        return;
      }
      // Define AppSettings interface matching the backend
      interface AppSettings {
        defaultCopyFormat?: string;
        customImagePrefix?: string;
        enableHotlinkProtection?: boolean;
        allowedDomains?: string[];
        siteDomain?: string; // Added siteDomain
      }
      const settings = await response.json() as AppSettings;

      if (defaultCopyFormatSelect && settings.defaultCopyFormat) {
        defaultCopyFormatSelect.value = settings.defaultCopyFormat;
      }
      if (domainLabel) {
        if (typeof settings.siteDomain === 'string' && settings.siteDomain.length > 0) {
          domainLabel.innerText = settings.siteDomain;
        } else {
          domainLabel.innerText = "your-domain.com/"
        }
      }
      if (customImagePrefixInput && typeof settings.customImagePrefix === 'string') {
        customImagePrefixInput.value = settings.customImagePrefix;
      }
      if (siteDomainInput && typeof settings.siteDomain === 'string') { // Load siteDomain
        siteDomainInput.value = settings.siteDomain;
      }
      if (hotlinkCheckbox && typeof settings.enableHotlinkProtection === 'boolean') {
        hotlinkCheckbox.checked = settings.enableHotlinkProtection;
        toggleAllowedDomainsSection(settings.enableHotlinkProtection);
      }
      if (allowedDomainsTextarea && Array.isArray(settings.allowedDomains)) {
        allowedDomainsTextarea.value = settings.allowedDomains.join('\n');
      }
    } catch (error) {
      console.error('Error loading settings:', error);
      alert('加载设置时出错。');
    }
  }

  function toggleAllowedDomainsSection(show: boolean) {
    if (allowedDomainsSection) {
      allowedDomainsSection.classList.toggle('hidden', !show);
    }
  }

  hotlinkCheckbox?.addEventListener('change', () => {
    toggleAllowedDomainsSection(hotlinkCheckbox.checked);
  });

  // --- Save settings ---
  form?.addEventListener('submit', async (event) => {
    event.preventDefault();
    if (!defaultCopyFormatSelect || !customImagePrefixInput || !siteDomainInput || !hotlinkCheckbox || !allowedDomainsTextarea) {
        alert('表单元素未找到，无法保存。');
        return;
    }

    const settingsToSave = {
      defaultCopyFormat: defaultCopyFormatSelect.value,
      customImagePrefix: customImagePrefixInput.value.trim(),
      siteDomain: siteDomainInput.value.trim(), // Save siteDomain
      enableHotlinkProtection: hotlinkCheckbox.checked,
      allowedDomains: allowedDomainsTextarea.value.split('\n').map(d => d.trim()).filter(d => d),
    };

    try {
      const response = await fetch('/api/admin/settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settingsToSave),
      });

      if (!response.ok) {
        let errorPayload: { error?: string; details?: string } = { error: '保存失败' };
        try { 
            const parsedError: any = await response.json();
            if(parsedError && typeof parsedError.error === 'string') errorPayload.error = parsedError.error;
            if(parsedError && typeof parsedError.details === 'string') errorPayload.details = parsedError.details;
        } catch(e){}
        throw new Error(errorPayload.error || errorPayload.details || `HTTP error ${response.status}`);
      }
      
      // No need to consume response.json() again if not using its content for success message
      // const successData = await response.json();
      
      // Save defaultCopyFormat to localStorage for use on the main upload page
      if (settingsToSave.defaultCopyFormat) {
        localStorage.setItem('defaultCopyFormat', settingsToSave.defaultCopyFormat);
      } else {
        localStorage.removeItem('defaultCopyFormat'); // Or set to a default like 'url'
      }

      alert('设置已成功保存！');
      // Optionally, re-load settings or update UI if needed, though usually not necessary if form reflects current state.
    } catch (error: any) {
      console.error('Error saving settings:', error);
      alert(`保存设置失败: ${error.message}`);
    }
  });

  // Load settings when the page is ready
  document.addEventListener('DOMContentLoaded', loadSettings);
</script>
